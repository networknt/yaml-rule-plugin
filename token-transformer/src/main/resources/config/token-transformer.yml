proxyHost: ${token-transformer.proxyHost:}
proxyPort: ${token-transformer.proxyPort:}
enableHttp2: ${token-transformer.enableHttp2:true}
moduleMasks: ${token-transformer.moduleMasks:}
#tokenSchemas: ${token-transformer.tokenSchemas:}
tokenSchemas:
#*-------------------------------------------------*#
#*---------< mras two-way SSL example >------------*#
#*-------------------------------------------------*#
#  mrasSSL:
#    pathPrefixAuth:
#      username: "my-basic-username"
#      password: "my-basic-password"
#      tokenTtl: 300
#    request:
#      cacheHttpClient: true
#      cacheSSLContext: false
#      url: "https://test.mras.com/services/oauth2/token"
#      type: application/x-www-form-urlencoded
#      sslContextSchema:
#        tlsVersion: TLSv1.2
#        trustStore:
#          name: mras_ts.jks
#          password: password
#        keyStore:
#          name: api.ais-dev
#          password: password
#          aliasPass: password
#      headers:
#        Content-Type: application/x-www-form-urlencoded
#        Authorization: "BASIC <encoded_credentials>"
#      body:
#        grant_type: client_credentials
#
#    source:
#      body:
#        - source: access_token
#          destination: "!ref(pathPrefixAuth.accessToken)"
#        - source: scope
#          destination: "!ref(pathPrefixAuth.scope)"
#
#    update:
#      direction: REQUEST
#      headers:
#        Authorization: "Bearer !ref(pathPrefixAuth.accessToken)"

#*-------------------------------------------------*#
#*----------< mras microsoft example >-------------*#
#*-------------------------------------------------*#
#  mrasMicrosoft:
#    pathPrefixAuth:
#      clientId: "my-microsoft-client-id"
#      clientSecret: "my-microsoft-client-secret"
#    request:
#      cacheHttpClient: true
#      url: "https://test.mras.com/services/oauth2/token"
#      type: application/x-www-form-urlencoded
#      headers:
#        Content-Type: application/x-www-form-urlencoded
#      body:
#        grant_type: "client_credentials"
#        resource: "9bcadce-3312-4c2b-9a5d-0e90e8b92c67"
#        client_id: "!ref(pathPrefixAuth.clientId)"
#        client_secret: "!ref(pathPrefixAuth.clientSecret)"
#
#    source:
#      body:
#        - source: access_token
#          destination: "!ref(pathPrefixAuth.accessToken)"
#        - source: expires_in
#          destination: "!ref(pathPrefixAuth.tokenTtl)"
#
#    update:
#      direction: REQUEST
#      headers:
#        Authorization: "Bearer !ref(pathPrefixAuth.accessToken)"

#*-------------------------------------------------*#
#*-------------< lifeware example >----------------*#
#*-------------------------------------------------*#
#  lifeware:
#    pathPrefixAuth:
#      clientId: "my-id"
#      clientSecret: "abc-123"
#    request:
#      cacheHttpClient: true
#      url: "https://networknttest.asp.lifeware.lu/api/v0/token"
#      type: application/json
#      headers:
#        Content-Type: application/json
#        Accept: application/json
#      body:
#        client_id: "!ref(pathPrefixAuth.clientId)"
#        client_secret: "!ref(pathPrefixAuth.clientSecret)"
#    source:
#      body:
#        - source: access_token
#          destination: "!ref(pathPrefixAuth.accessToken)"
#    update:
#      direction: REQUEST
#      headers:
#        Authorization: "Bearer !ref(pathPrefixAuth.accessToken)"

#*-------------------------------------------------*#
#*------------< Salesforce example >---------------*#
#*-------------------------------------------------*#
    GrsOps-salesforce-schema:
      pathPrefixAuth:
        grantType: urn:ietf:params:oauth:grant-type:jwt-bearer
        tokenTtl: 60
      request:
        cacheHttpClient: false
        url: https://test.salesforce.com/services/oauth2/token
        type: "application/x-www-form-urlencoded"
        jwtSchema:
          jwtTtl: 300
          keyStore:
            name: lightgateway.pfx
            password: CRYPT:3d24fc5e86fbcaf491f33def88560b47:ef7cc9693ea88e18da01b149ea5f5742
            alias: lightgateway
            aliasPass: CRYPT:3d24fc5e86fbcaf491f33def88560b47:ef7cc9693ea88e18da01b149ea5f5742
          algorithm: SHA256withRSA
          jwtHeader:
            staticFields:
              alg: RS256
          jwtBody:
            staticFields:
              iss: 3MVG9P7Pp4QrREPm4EkHavd5XztJYKqHYA6rWIEg81zeewLuI.GMZOEDMfKIsbkGtxBbHC5W8EwArz0g79dDT
              sub: apiuser.kafka@sunlife.group.stage.grsopdev09
              aud: https://test.salesforce.com
            expiryFields:
              - exp
        headers:
          Content-Type: application/x-www-form-urlencoded
        body:
          grant_type: "!ref(pathPrefixAuth.grantType)"
          assertion: "!ref(pathPrefixAuth.accessToken)"
      source:
        body:
          - source: access_token
            destination: "!ref(pathPrefixAuth.accessToken)"
      update:
        direction: REQUEST
        headers:
          Authorization: "Bearer !ref(pathPrefixAuth.accessToken)"
